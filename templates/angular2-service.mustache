/* tslint:disable */
import { Injectable } from '@angular/core';
import { Http, Response, Headers } from '@angular/http';
import { {{#definitions}}{{name}}{{^last}}, {{/last}}{{/definitions}} } from './models';
import 'rxjs/Rx';
import {Observable} from "rxjs";
import {Action} from "@ngrx/store";

@Injectable()
/**
* Created with angular2-swagger-client-generator v{{&version}}
*/
export class ApiClientService {

    public domain : string = "http://localhost:8080/clamy/services/rest";

    constructor(public http: Http) {
        if(this.domain.length === 0) {
            throw new Error('Domain parameter must be specified as a string.');
        }
    }

{{#methods}}
    /**
    {{#summaryLines}}
        * {{&.}}
    {{/summaryLines}}
    *
    * @method
    * @name {{&methodName}}
    {{#parameters}}
    {{^isSingleton}}* @param {{=<% %>=}}{<%&typescriptType%>}<%={{ }}=%> {{&camelCaseName}} - {{&description}}{{/isSingleton}}
    {{/parameters}}
    * @param {(n: any) => Action} success - This is a callback function that returns an action and is used when data is successfully retrieved data from the service
    * @param {(n: any) => Action} failure - This is a callback function that returns an action and is used when a call to the service fails
    *
    */
    public {{&methodName}}({{#parameters}}{{&camelCaseName}}: {{typescriptType}}, {{/parameters}}) : Observable<{{&response}}>{
        let queryParameters = {};
        let headers = new Headers();
    {{#parameters}}
        {{#isQueryParameter}}
            {{#isSingleton}}
        queryParameters['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                {{#isPatternType}}
        Object.keys(parameters).forEach(function(parameterName) {
            if(new RegExp('{{&pattern}}').test(parameterName)){
                queryParameters[parameterName] = parameters[parameterName];
            }
        });
                {{/isPatternType}}
                {{^isPatternType}}
        if({{&camelCaseName}} !== undefined){
            queryParameters['{{&name}}'] = {{&camelCaseName}};
        }
                {{/isPatternType}}
            {{/isSingleton}}
        {{/isQueryParameter}}
        {{#isHeaderParameter}}
            {{#isSingleton}}
            headers.append('{{&name}}', '{{&singleton}}');
            {{/isSingleton}}
            {{^isSingleton}}
        if({{&camelCaseName}} !== undefined){
            headers.append('{{&name}}', {{&camelCaseName}});
        }
            {{/isSingleton}}
        {{/isHeaderParameter}}
        {{#isFormParameter}}
            {{#isSingleton}}
        form['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
        if(parameters['{{&camelCaseName}}'] !== undefined){
            form['{{&name}}'] = parameters['{{&camelCaseName}}'];
        }
            {{/isSingleton}}
        {{/isFormParameter}}
    {{/parameters}}
        let uri = `{{&backTickPath}}`;
        
        {{^hasPayload}}
        let body = null;
        {{/hasPayload}}

        return this.MakeRequest<{{&response}}>("{{angular2httpMethod}}", uri, headers, queryParameters,  {{hasPayload}}, body);
    }

{{/methods}}

    private MakeRequest<T>(httpVerb:string, uri:string, headers : Headers, queryParameters: any,  hasPayload : boolean, body : any) : Observable<T> {

        headers.append('Content-Type', 'application/json');

        let hasQueryParameters = Object.keys(queryParameters).length > 0 && queryParameters.constructor === Object;

        if(hasQueryParameters){
            let firstEntry = true;
            uri = `${uri}?`;
            for(let item in queryParameters) {
                if(!firstEntry) {
                    uri = `${uri}&`;
                }
                uri = `${uri}${item}=${queryParameters[item]}`;
                firstEntry = false;
            }
        }

        if (httpVerb == "get") {
          return this.http
              .get(this.domain + uri, { headers: headers })
              .map(res => <T>res.json());
        }
        else if (httpVerb == "put") {
          return this.http
              .put(this.domain + uri, body, { headers: headers })
              .map(res => <T>res.json());
        }
        else if (httpVerb == "post") {
          return this.http
              .post(this.domain + uri, body, { headers: headers })
              .map(res => <T>res.json());
        }
    }
}
